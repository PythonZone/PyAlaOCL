--******************************************************************
--**                       CyberHotel.use
--**
--**---- DOMAINE ----------------
--** Ce modèle décrit la structure et les contraintes associées
--** à un système de gestion de résidences. Les personnes séjournant
--** dans de telles résidences peuvent le faire pour des séjours 
--** allant de quelques jours à plusieurs mois. 
--** D'un point de vue "logique" le modèle est décomposé en trois 
--** "packages". USEOCL ne proposant pas la notion de package
--** ces packages sont définis simplement par des commentaires
--** ci-dessous. Les trois packages sont les suivants: 
--**   (1) Le package Batiment décrit les résidences, les salles,
--**       les chambres et les salles de bains. 
--**   (2) Le package Location décrit les locataires et occupants 
--**       de chaque chambre. 
--**   (3) Finalement le package Tarification décrit les tarifs
--**       associés aux locations ainsi que les éventuelles réductions 
--**       consenties.
--******************************************************************



model CyberHotel

--================================================================
--                            STRUCTURE
--================================================================

-------------------------------------------
--            Package Batiment 
-------------------------------------------

class Residence
attributes
  etageMin : Integer
  etageMax : Integer
  nbEtoiles : Integer
  nbPlacesMax : Integer -- derived 
  tarifMoyen : Real -- derived
operations
  -- Ensemble des chambres d'une résidence. 
  chambres() : Set(Chambre) 
    = salles->select(oclIsKindOf(Chambre))->oclAsType(Set(Chambre))
  -- Ensemble des chambres "utiles" d'une résidence.
  -- Les chambres "utiles" sont celles qui ne sont pas en travaux.
  chambresUtiles() : Set(Chambre)
    = chambres()->select(not enTravaux) 
  -- Ensemble des salles de bain de la résidence
  sallesDeBain() : Set(SalleDeBain)
    = salles->select(oclIsKindOf(SalleDeBain))->oclAsType(Set(SalleDeBain))
end

class Salle
attributes
  numero : Integer
  etage : Integer -- derived
  enTravaux : Boolean
end

class SalleDeBain < Salle
attributes
  estSurLePallier : Boolean
end

class Chambre < Salle
attributes
  nbLitsSimples : Integer
  nbLitsDoubles : Integer
  prix : Real
end

composition ComporteSalles between
  Residence[1] role residence
  Salle[*] role salles
end

association EstPrivativeDe between
  SalleDeBain[0..3] role sallesDeBainPrivatives
  Chambre[0..1] role chambre
end


-------------------------------------------
--            Package Location 
-------------------------------------------


class Resident 
attributes
  nom : String
  age : Integer
end

class Locataire < Resident
attributes
  prixPaye : Real -- derived
end

association EstOccupeePar between
  Chambre[1] role chambreOccupee
  Resident[*] role occupants
end

associationclass LocationDUneChambre between
  Chambre[1..*] role chambresLouees
  Locataire[0..1] role locataire  
attributes
  reduction : Real -- derived
  prix : Real -- derived
end



-------------------------------------------
--            Package Tarification 
-------------------------------------------

class Reduction
attributes
  taux : Integer
  label : String
end

composition BeneficieDe between
  LocationDUneChambre[1] role location
  Reduction[*] role reductions
end


--================================================================
--                            CONSTRAINTS
--================================================================

constraints

-------------------------------------------
--            Package Batiment 
-------------------------------------------

context Residence
inv ordreEtages: 
  -- L'étage minimum est inférieur ou égal à l'étage maximum.
  etageMin <= etageMax


-- Les résidences sont classées entre * et *****.
context Residence
inv domaine_nbEtoiles: 
  nbEtoiles >= 1 and nbEtoiles <= 5


-- Les salles sont entre l'étage minimum et maximum
-- d'une résidence.  
context Salle
inv etageEntreMinEtMax: 
  etage >= residence.etageMin and 
  etage <= residence.etageMax


-- Toutes les salles de bains qui ne sont pas associées
-- à une chambre sont sur le pallier.
context SalleDeBain
inv definition_estSurLePallier:
  estSurLePallier = chambre->isEmpty()


-- L'étage associé à une chambre est determiné à
-- partir des premiers chiffres. Par exemple la 
-- salle 603 est au 6ème étage.
context Chambre
inv definition_etage:
  etage = numero div 100

  
-- Toutes les salles ont un numéro différent, sauf les
-- salles de bains "privées".
context Residence
inv numeroUniqueSaufSDBDePallier: 
  (salles 
  - (sallesDeBain()->select(not estSurLePallier)))
     ->isUnique(numero)


-- Les salles de bain privées ont le même numéro que la
-- chambre à laquelle elles sont associées. 
context SalleDeBain
inv memeNumeroQueChambreSiPrivative: 
  chambre->notEmpty() implies numero = chambre.numero


-- Les chambres qui ne sont pas en travaux ont au moins un lit.
context Chambre
inv auMoins1Lit: 
  not enTravaux implies nbLitsSimples + nbLitsDoubles >= 1


-- Le nombre de places maximum dans l'hotel est calculé 
-- à partir du nombre de lits.
context Residence
inv definition_nbPlacesMax: 
  nbPlacesMax = 
    chambres()->collect(nbLitsSimples+2*nbLitsDoubles)
      ->sum()


-- Dans une résidence 3 étoiles, toutes les chambres utiles 
-- ont au moins une salle de bain qui n'est pas en travaux.
context Residence
inv troisEtoiles:
  nbEtoiles >= 3 implies 
    chambresUtiles()->forAll ( 
      sallesDeBainPrivatives->exists(not enTravaux))



-------------------------------------------
--            Package Location 
-------------------------------------------

-- Le locataire d'une chambre occupe l'une des chambres
-- qu'il a loué.
context Locataire
inv locataireDansChambreOccupee:
  chambresLouees->includes(chambreOccupee)


-- Toutes les chambres louées par un locataire sont
-- dans la même résidence.
context Locataire
inv locationDansMemeResidence: 
  chambresLouees.residence->asSet()->size() = 1


-- Seuls les adultes peuvent louer des chambres.
context Locataire
inv locataireAdulte: 
  age>=18


-- Il ne peut pas y avoir plus de personnes dans une 
-- chambre que le nombre de places correspondantes.
-- Les enfants de moins de deux ans ne sont pas pris 
-- en compte dans cette règle.
context Chambre
inv occupationMaximaleDUneChambre: 
  occupants->select(age>=3)
    ->size() <= nbLitsSimples + nbLitsDoubles*2


-- Il doit y avoir au moins un adulte par chambre.
context Chambre
inv auMoinsUnAdulteParChambre: 
  occupants->notEmpty implies occupants->exists(age>=18)


-- Il doit y avoir au moins un adulte par chambre.
context Chambre
inv occupantDansChambreLouee: 
  locataire->isEmpty implies occupants->isEmpty()
  

-- Une chambre en travaux ne peut pas être louée.
context Chambre
inv enTravauxPasLouee: 
  enTravaux implies locataire->isEmpty

-- Toutes les chambres louées sont occupées par au 
-- moins un occupant.
context Chambre  
inv pasDeChambreLoueeVide:
  locataire->notEmpty implies occupants->notEmpty


-------------------------------------------
--            Package Tarification 
-------------------------------------------


-- Le taux associé à une réduction est un pourcentage.
context Reduction
inv domaine_estPourcentage:
  taux >= 0 and taux <= 100


-- Toutes les réductions associées à la location 
-- d'une chambre doivent avoir des labels différents.
context LocationDUneChambre
inv labelDeReductionUnique: 
  reductions->isUnique(label)


-- Le montant total des réductions consenties pour la 
-- location d'un chambre doit être inférieur à 70%.
context LocationDUneChambre
inv tauxCumulesLimite :
  reductions.taux->sum() <= 70


-- Le montant de la réduction consentie pour la location 
-- d'une chambre correspond à la somme des réductions 
-- associées à la location de cette chambre multiplié par 
-- le prix total de la chambre.
context LocationDUneChambre
inv definition_reduction:
  reduction = reductions.taux->sum()*chambresLouees.prix/100


-- Le prix de location d'une chambre est le prix de 
-- la chambre après déduction de la réduction consentie. 
context self : LocationDUneChambre
inv definition_prix :
  self.prix = self.chambresLouees.prix - self.reduction


-- Le prix total payé par un locataire est la somme des 
-- prix payés pour chaque chambre qu'il à loué. Une remise de
-- 20€ est faite sur le prix total dans le cas ou tous les 
-- membres du groupe de location ne sont pas logés au même étage.
context Locataire
inv definition_prixPaye : 
  let nbEtagesDuGroupe : Integer 
        = chambresLouees.etage->asSet->size in
  prixPaye = locationDUneChambre.prix->sum
             - (if nbEtagesDuGroupe >= 2 then 20 else 0 endif)

             
-- Le "tarif moyen" associé à une résidence est le revenu 
-- total de la résidence divisé par le nombre d'occupants 
-- sachant que les enfants mineurs ne sont pas pris en compte.
context Residence
inv definiton_tarifMoyen: 
  tarifMoyen =
    chambresUtiles().locataire.prixPaye->sum() 
    / chambresUtiles().occupants->select(age>=18)->size()
    
    
-- Une réduction de 50% est accordée si toutes les salles
-- de bains d'une chambre sont en travaux. Le Label associé
-- à cette réduction est "CTrav".   
context LocationDUneChambre
inv ctrav50:
  ( chambresLouees.sallesDeBainPrivatives->notEmpty
  and chambresLouees.sallesDeBainPrivatives->forAll(enTravaux))
    implies
      (reductions->one(label='CTrav') 
       and reductions->any(label='CTrav').taux=50)


-- Une réduction de 20% est accordée si une salle de bain
-- d'une chambre est en travaux, mais qu'il y au tout de
-- même une qui n'est pas en travaux. Le label associé a
-- cette réduction est CTRav. 
context LocationDUneChambre
inv ctrav20:
  (   chambresLouees.sallesDeBainPrivatives->exists(enTravaux)
  and chambresLouees.sallesDeBainPrivatives->exists(not enTravaux))
    implies
      (reductions->one(label='CTrav') 
       and reductions->any(label='CTrav').taux=20) 
